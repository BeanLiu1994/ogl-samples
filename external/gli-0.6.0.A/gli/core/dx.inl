///////////////////////////////////////////////////////////////////////////////////
/// OpenGL Image (gli.g-truc.net)
///
/// Copyright (c) 2008 - 2013 G-Truc Creation (www.g-truc.net)
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.
///
/// @ref core
/// @file gli/core/dx.inl
/// @date 2013-11-09 / 2013-11-09
/// @author Christophe Riccio
///////////////////////////////////////////////////////////////////////////////////

namespace gli
{
	inline dx::dx()
	{
		static format const Table[] =
		{
			// unorm formats
			{DDPF_LUMINANCE, D3DFMT_L8, DXGI_FORMAT_R8_UNORM},					//R8_UNORM,
			{DDPF_LUMINANCEALPHA, D3DFMT_A8L8, DXGI_FORMAT_R8G8_UNORM},			//RG8_UNORM,
			{DDPF_RGB, D3DFMT_R8G8B8, DXGI_FORMAT_B8G8R8X8_UNORM},				//RGB8_UNORM,
			{DDPF_RGBA, D3DFMT_A8R8G8B8, DXGI_FORMAT_B8G8R8A8_UNORM},			//RGBA8_UNORM,

			{DDPF_LUMINANCE, D3DFMT_L16, DXGI_FORMAT_R16_UNORM},				//R16_UNORM,
			{DDPF_LUMINANCEALPHA, D3DFMT_G16R16, DXGI_FORMAT_R16G16_UNORM},		//RG16_UNORM,
			{DDPF_RGB, D3DFMT_UNKNOWN, DXGI_FORMAT_B8G8R8X8_TYPELESS},			//RGB16_UNORM,
			{DDPF_RGBA, D3DFMT_A16B16G16R16, DXGI_FORMAT_R16G16B16A16_UNORM},	//RGBA16_UNORM,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R10G10B10A2_UNORM},			//RGB10A2_UNORM,

			// snorm formats
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_SNORM},					//R8_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_SNORM},					//RG8_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},					//RGB8_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_SNORM},				//RGBA8_SNORM,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16_SNORM},					//R16_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16_SNORM},				//RG16_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},					//RGB16_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16B16A16_SNORM},			//RGBA16_SNORM,

			// Unsigned integer formats
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_UINT},					//R8U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_UINT},					//RG8U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},					//RGB8U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_UINT},				//RGBA8U,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16_UINT},					//R16U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16_UINT},				//RG16U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},					//RGB16U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16B16A16_UINT},			//RGBA16U,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32_UINT},					//R32U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32_UINT},				//RG32U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32_UINT},				//RGB32U,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32A32_UINT},			//RGBA32U,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R10G10B10A2_UINT},			//RGB10A2U,

			/// Signed integer formats
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8_SINT},					//R8I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8_SINT},					//RG8I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},					//RGB8I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R8G8B8A8_SINT},				//RGBA8I,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16_SINT},					//R16I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16_SINT},				//RG16I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},					//RGB16I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R16G16B16A16_SINT},			//RGBA16I,

			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32_SINT},					//R32I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32_SINT},				//RG32I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32_SINT},				//RGB32I,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32A32_SINT},			//RGBA32I,

			/// Floating formats
			{DDPF_LUMINANCE, D3DFMT_R16F, DXGI_FORMAT_R16_FLOAT},				//R16F,
			{DDPF_LUMINANCEALPHA, D3DFMT_G16R16F, DXGI_FORMAT_R16G16_FLOAT},	//RG16F,
			{DDPF_RGB, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},					//RGB16F,
			{DDPF_RGBA, D3DFMT_A16B16G16R16F, DXGI_FORMAT_R16G16B16A16_FLOAT},	//RGBA16F,

			{DDPF_LUMINANCE, D3DFMT_R32F, DXGI_FORMAT_R32_FLOAT},				//R32F,
			{DDPF_LUMINANCEALPHA, D3DFMT_G32R32F, DXGI_FORMAT_R32G32_FLOAT},	//RG32F,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R32G32B32_FLOAT},			//RGB32F,
			{DDPF_RGBA, D3DFMT_A32B32G32R32F, DXGI_FORMAT_R32G32B32A32_FLOAT},	//RGBA32F,

			/// sRGB formats
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},								//SR8,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},								//SRG8,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B8G8R8X8_UNORM_SRGB},					//SRGB8,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B8G8R8A8_UNORM_SRGB},					//SRGB8_ALPHA8,

			/// Packed formats
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R9G9B9E5_SHAREDEXP},		//RGB9E5,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_R11G11B10_FLOAT},		//RG11B10F,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},				//RG3B2,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B5G6R5_UNORM},			//R5G6B5,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_B5G5R5A1_UNORM},			//RGB5A1,
			{DDPF_RGBA, D3DFMT_A4R4G4B4, DXGI_FORMAT_UNKNOWN},				//RGBA4,

			/// Depth formats
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D16_UNORM},				//D16,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},				//D24X8,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D24_UNORM_S8_UINT},		//D24S8,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D32_FLOAT},				//D32F,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_D32_FLOAT_S8X24_UINT},	//D32FS8X24,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_UNKNOWN},				//D32FS8X24,

			/// Compressed formats
			{DDPF_FOURCC, D3DFMT_DXT1, DXGI_FORMAT_BC1_UNORM},						//RGB_DXT1,
			{DDPF_FOURCC, D3DFMT_DXT1, DXGI_FORMAT_BC1_UNORM},						//RGBA_DXT1,
			{DDPF_FOURCC, D3DFMT_DXT3, DXGI_FORMAT_BC2_UNORM},						//RGBA_DXT3,
			{DDPF_FOURCC, D3DFMT_DXT5, DXGI_FORMAT_BC3_UNORM},						//RGBA_DXT5,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC4_UNORM},						//R_ATI1N_UNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC4_SNORM},						//R_ATI1N_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC5_UNORM},						//RG_ATI2N_UNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC5_SNORM},						//RG_ATI2N_SNORM,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC6H_UF16},						//RGB_BP_UF16,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC6H_SF16},						//RGB_BP_SF16,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC7_UNORM},						//RGB_BP_UNORM,
			{DDPF_FOURCC, D3DFMT_POWERVR_4BPP, DXGI_FORMAT_UNKNOWN},				//RGB_PVRTC_4BPPV1,
			{DDPF_FOURCC, D3DFMT_POWERVR_2BPP, DXGI_FORMAT_UNKNOWN},				//RGB_PVRTC_2BPPV1,
			{DDPF_FOURCC, D3DFMT_POWERVR_4BPP, DXGI_FORMAT_UNKNOWN},				//RGBA_PVRTC_4BPPV1,
			{DDPF_FOURCC, D3DFMT_POWERVR_2BPP, DXGI_FORMAT_UNKNOWN},				//RGBA_PVRTC_2BPPV1,
			{DDPF_FOURCC, D3DFMT_ETC1, DXGI_FORMAT_UNKNOWN},						//ATC_RGB,
			{DDPF_FOURCC, D3DFMT_ETC1, DXGI_FORMAT_UNKNOWN},						//ATC_RGBA_EXPLICIT_ALPHA,
			{DDPF_FOURCC, D3DFMT_ETC1, DXGI_FORMAT_UNKNOWN},						//ATC_RGBA_INTERPOLATED_ALPHA,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_4x4,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_5x4,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_5x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_6x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_6x6,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_8x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_8x6,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_8x8,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_10x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_10x6,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_10x8,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_10x10,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_12x10,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_12x12,

			// Compressed sRGB formats
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC1_UNORM_SRGB},					//sRGB_DXT1,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC1_UNORM_SRGB},					//sRGB_DXT1,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC2_UNORM_SRGB},					//sRGB_DXT3,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC3_UNORM_SRGB},					//sRGB_DXT5,
			{DDPF_FOURCC, D3DFMT_DX10, DXGI_FORMAT_BC7_UNORM_SRGB},					//sRGB_BP,
			{DDPF_FOURCC, D3DFMT_POWERVR_4BPP, DXGI_FORMAT_UNKNOWN},				//RGB_PVRTC_4BPPV1,
			{DDPF_FOURCC, D3DFMT_POWERVR_2BPP, DXGI_FORMAT_UNKNOWN},				//RGB_PVRTC_2BPPV1,
			{DDPF_FOURCC, D3DFMT_POWERVR_4BPP, DXGI_FORMAT_UNKNOWN},				//RGBA_PVRTC_4BPPV1,
			{DDPF_FOURCC, D3DFMT_POWERVR_2BPP, DXGI_FORMAT_UNKNOWN},				//RGBA_PVRTC_2BPPV1,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_4x4,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_5x4,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_5x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_6x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_6x6,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_8x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_8x6,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//RGBA_ASTC_8x8,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//SRGB8_ALPHA8_ASTC_10x5,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//SRGB8_ALPHA8_ASTC_10x6,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//SRGB8_ALPHA8_ASTC_10x8,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//SRGB8_ALPHA8_ASTC_10x10,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN},						//SRGB8_ALPHA8_ASTC_12x10,
			{DDPF_FOURCC, D3DFMT_UNKNOWN, DXGI_FORMAT_UNKNOWN}						//SRGB8_ALPHA8_ASTC_12x12,
		};

		static_assert(sizeof(Table) / sizeof(Table[0]) == FORMAT_COUNT, "GLI error: format descriptor list doesn't match number of supported formats");

		std::copy(&Table[0], &Table[0] + FORMAT_COUNT, this->Translation.begin());
	}

	inline dx::format const & dx::translate(gli::format const & Format) const
	{
		return this->Translation[Format];
	}
}//namespace gli
