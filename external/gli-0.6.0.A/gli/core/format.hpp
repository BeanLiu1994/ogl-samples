///////////////////////////////////////////////////////////////////////////////////
/// OpenGL Image (gli.g-truc.net)
///
/// Copyright (c) 2008 - 2012 G-Truc Creation (www.g-truc.net)
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
/// 
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
/// 
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.
///
/// @ref core
/// @file gli/core/format.hpp
/// @date 2012-10-16 / 2012-10-16
/// @author Christophe Riccio
///////////////////////////////////////////////////////////////////////////////////

#pragma once

namespace gli
{
	enum format
	{
		FORMAT_INVALID = -1,

		// unorm formats
		FORMAT_R8_UNORM = 0, FORMAT_FIRST = FORMAT_R8_UNORM,
		FORMAT_RG8_UNORM,
		FORMAT_RGB8_UNORM,
		FORMAT_RGBA8_UNORM,

		FORMAT_R16_UNORM,
		FORMAT_RG16_UNORM,
		FORMAT_RGB16_UNORM,
		FORMAT_RGBA16_UNORM,

		FORMAT_RGB10A2_UNORM,

		// snorm formats
		FORMAT_R8_SNORM,
		FORMAT_RG8_SNORM,
		FORMAT_RGB8_SNORM,
		FORMAT_RGBA8_SNORM,

		FORMAT_R16_SNORM,
		FORMAT_RG16_SNORM,
		FORMAT_RGB16_SNORM,
		FORMAT_RGBA16_SNORM,

		// Unsigned integer formats
		FORMAT_R8_UINT,
		FORMAT_RG8_UINT,
		FORMAT_RGB8_UINT,
		FORMAT_RGBA8_UINT,

		FORMAT_R16_UINT,
		FORMAT_RG16_UINT,
		FORMAT_RGB16_UINT,
		FORMAT_RGBA16_UINT,

		FORMAT_R32_UINT,
		FORMAT_RG32_UINT,
		FORMAT_RGB32_UINT,
		FORMAT_RGBA32_UINT,

		FORMAT_RGB10A2_UINT,

		// Signed integer formats
		FORMAT_R8_SINT,
		FORMAT_RG8_SINT,
		FORMAT_RGB8_SINT,
		FORMAT_RGBA8_SINT,

		FORMAT_R16_SINT,
		FORMAT_RG16_SINT,
		FORMAT_RGB16_SINT,
		FORMAT_RGBA16_SINT,

		FORMAT_R32_SINT,
		FORMAT_RG32_SINT,
		FORMAT_RGB32_SINT,
		FORMAT_RGBA32_SINT,

		// Floating formats
		FORMAT_R16_SFLOAT,
		FORMAT_RG16_SFLOAT,
		FORMAT_RGB16_SFLOAT,
		FORMAT_RGBA16_SFLOAT,

		FORMAT_R32_SFLOAT,
		FORMAT_RG32_SFLOAT,
		FORMAT_RGB32_SFLOAT,
		FORMAT_RGBA32_SFLOAT,

		// sRGB formats
		FORMAT_R8_SRGB,
		FORMAT_RG8_SRGB,
		FORMAT_RGB8_SRGB,
		FORMAT_RGBA8_SRGB,

		// Packed formats
		FORMAT_RGB9E5_UFLOAT,
		FORMAT_RG11B10_UFLOAT,
		FORMAT_R3G3B2_UNORM,
		FORMAT_R5G6B5_UNORM,
		FORMAT_RGB5A1_UNORM,
		FORMAT_RGBA4_UNORM,

		// Depth formats
		FORMAT_D16_UNORM,
		FORMAT_D24_UNORM,
		FORMAT_D24_UNORM_S8_UINT,
		FORMAT_D32F_SFLOAT,
		FORMAT_D32F_SFLOAT_S8_UINT,
		FORMAT_S8_UINT,

		// Compressed formats
		FORMAT_RGB_BC1_UNORM,
		FORMAT_RGBA_BC1_UNORM,
		FORMAT_RGBA_BC2_UNORM,
		FORMAT_RGBA_BC3_UNORM,
		FORMAT_R_BC4_UNORM,
		FORMAT_R_BC4_SNORM,
		FORMAT_RG_BC5_UNORM,
		FORMAT_RG_BC5_SNORM,
		FORMAT_RGB_BC6_UFLOAT,
		FORMAT_RGB_BC6_SFLOAT,
		FORMAT_RGB_BC7_UNORM,
		FORMAT_RGB_PVRTC4BPPV1_UNORM,
		FORMAT_RGB_PVRTC2BPPV1_UNORM,
		FORMAT_RGBA_PVRTC4BPPV1_UNORM,
		FORMAT_RGBA_PVRTC2BPPV1_UNORM,
		FORMAT_RGB_ATC_UNORM,
		FORMAT_RGBA_ATC_EXPLICIT_ALPHA_UNORM,
		FORMAT_RGBA_ATC_INTERPOLATED_ALPHA_UNORM,
		FORMAT_RGBA_ASTC_4x4_UNORM,
		FORMAT_RGBA_ASTC_5x4_UNORM,
		FORMAT_RGBA_ASTC_5x5_UNORM,
		FORMAT_RGBA_ASTC_6x5_UNORM,
		FORMAT_RGBA_ASTC_6x6_UNORM,
		FORMAT_RGBA_ASTC_8x5_UNORM,
		FORMAT_RGBA_ASTC_8x6_UNORM,
		FORMAT_RGBA_ASTC_8x8_UNORM,
		FORMAT_RGBA_ASTC_10x5_UNORM,
		FORMAT_RGBA_ASTC_10x6_UNORM,
		FORMAT_RGBA_ASTC_10x8_UNORM,
		FORMAT_RGBA_ASTC_10x10_UNORM,
		FORMAT_RGBA_ASTC_12x10_UNORM,
		FORMAT_RGBA_ASTC_12x12_UNORM,

		// Compressed sRGB formats
		FORMAT_SRGB_DXT1_UNORM,
		FORMAT_SRGB_ALPHA_DXT1_UNORM,
		FORMAT_SRGB_ALPHA_DXT3_UNORM,
		FORMAT_SRGB_ALPHA_DXT5_UNORM,
		FORMAT_SRGB_BP_UNORM,
		FORMAT_SRGB_PVRTC_2BPPV1_UNORM,
		FORMAT_SRGB_PVRTC_4BPPV1_UNORM,
		FORMAT_SRGB_ALPHA_PVRTC_2BPPV1_UNORM,
		FORMAT_SRGB_ALPHA_PVRTC_4BPPV1_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_4x4_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_5x4_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_5x5_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_6x5_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_6x6_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_8x5_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_8x6_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_8x8_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_10x5_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_10x6_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_10x8_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_10x10_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_12x10_UNORM,
		FORMAT_SRGB8_ALPHA8_ASTC_12x12_UNORM, FORMAT_LAST = FORMAT_SRGB8_ALPHA8_ASTC_12x12_UNORM
	};

	enum
	{
		FORMAT_COUNT = FORMAT_LAST - FORMAT_FIRST + 1,
	};

	enum info
	{
		FORMAT_COMPRESSED_BIT = (1 << 0),
		FORMAT_PACKED_BIT = (1 << 1),
		FORMAT_NORMALIZED_BIT = (1 << 2),
		FORMAT_SCALED_BIT = (1 << 3),
		FORMAT_UNSIGNED_BIT = (1 << 4),
		FORMAT_SIGNED_BIT = (1 << 5),
		FORMAT_INTEGER_BIT = (1 << 6),
		FORMAT_FLOAT_BIT = (1 << 7),
		FORMAT_DEPTH_BIT = (1 << 8),
		FORMAT_STENCIL_BIT = (1 << 9),
		FORMAT_COLORSPACE_SRGB_BIT = (1 << 10)
	};

}//namespace gli

