#version 460 core
#extension GL_NV_mesh_shader : enable

#define TRANSFORM0	1
#define VERTEX		0

precision highp float;
precision highp int;
layout(std140, column_major) uniform;
layout(std430, column_major) buffer;

layout(local_size_x=32) in;
layout(triangles) out;
layout(max_vertices=4, max_primitives=2) out;

out uint gl_PrimitiveCountNV;
out uint gl_PrimitiveIndicesNV[];

layout(binding = TRANSFORM0) uniform transform
{
	mat4 MVP;
} Transform;

struct vertex
{
	vec2 Position;
	vec2 Texcoord;
};

layout(std430, binding = VERTEX) buffer mesh
{
	vertex Vertex[];
} Mesh;

out gl_MeshPerVertexNV
{
	vec4  gl_Position;
} gl_MeshVerticesNV[];

out block
{
	vec2 Texcoord;
} Out[];

void main()
{
	gl_PrimitiveIndicesNV[0] = 0;
	gl_PrimitiveIndicesNV[1] = 1;
	gl_PrimitiveIndicesNV[2] = 2;
	gl_PrimitiveIndicesNV[3] = 2;
	gl_PrimitiveIndicesNV[4] = 3;
	gl_PrimitiveIndicesNV[5] = 0;
	gl_PrimitiveCountNV = 2;

	Out[gl_LocalInvocationID.x].Texcoord = Mesh.Vertex[gl_LocalInvocationID.x].Texcoord;
	gl_MeshVerticesNV[gl_LocalInvocationID.x].gl_Position = Transform.MVP * vec4(Mesh.Vertex[gl_LocalInvocationID.x].Position, 0.0, 1.0);
}
