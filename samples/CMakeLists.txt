function(glCreateSampleGTC NAME)
	set(SAMPLE_NAME ogl-${GL_VERSION_GTC}-${NAME})
	set(SHADER_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../data/${GL_VERSION_GTC})

	foreach(FILE ${GL_SHADER_GTC})
 		set(SHADER_PATH ${SHADER_PATH} ${SHADER_DIR}/${FILE})
	endforeach(FILE)

	source_group("Shader Files" FILES ${SHADER_PATH})
	add_executable(${SAMPLE_NAME} ogl-${GL_VERSION_GTC}-${NAME} ${SHADER_PATH})
	add_dependencies(${SAMPLE_NAME} ${TARGET_DATA_COPY})
	target_link_libraries(${SAMPLE_NAME} ${BINARY_FILES})
endfunction(glCreateSampleGTC)

#add_subdirectory(ogl-alpha-discard)
#add_subdirectory(ogl-alpha-test)
#add_subdirectory(ogl-alpha-to-coverage)

#add_subdirectory(ogl-buffer-render)
#add_subdirectory(ogl-buffer-streaming)
#add_subdirectory(ogl-buffer-texture)

if(APPLE)

# OpenGL 2.1 samples
set(GL_VERSION_GTC 210)

set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(buffer-type)
glCreateSampleGTC(buffer-update)
glCreateSampleGTC(draw-elements)
glCreateSampleGTC(draw-range)

set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(image-2d)
glCreateSampleGTC(image-2d-compressed)

set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(query-occlusion)
glCreateSampleGTC(rasterizer-viewport)

set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(sampler-anisotropy-ext)
glCreateSampleGTC(sampler-filter)
glCreateSampleGTC(sampler-wrap)

set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(test-scissor)

else(APPLE)

<<<<<<< HEAD
add_subdirectory(ogl-210-buffer-type)
add_subdirectory(ogl-210-buffer-update)
add_subdirectory(ogl-210-draw-elements)
add_subdirectory(ogl-210-draw-range)
add_subdirectory(ogl-210-image-2d)
add_subdirectory(ogl-210-image-2d-compressed)
add_subdirectory(ogl-210-query-occlusion)
add_subdirectory(ogl-210-rasterizer-viewport)
add_subdirectory(ogl-210-sampler-anisotropy-ext)
add_subdirectory(ogl-210-sampler-filter)
add_subdirectory(ogl-210-sampler-wrap)
add_subdirectory(ogl-210-test-scissor)

add_subdirectory(ogl-330-blend-index)
add_subdirectory(ogl-330-blend-mrt)
add_subdirectory(ogl-330-buffer-texture)
add_subdirectory(ogl-330-buffer-type)
add_subdirectory(ogl-330-buffer-uniform)
add_subdirectory(ogl-330-buffer-update)
add_subdirectory(ogl-330-draw-base-vertex)
add_subdirectory(ogl-330-draw-elements)
add_subdirectory(ogl-330-draw-instanced)
add_subdirectory(ogl-330-draw-instanced-array)
add_subdirectory(ogl-330-draw-multiple)
add_subdirectory(ogl-330-draw-range)
add_subdirectory(ogl-330-fbo-blit)
add_subdirectory(ogl-330-fbo-mipmaps)
add_subdirectory(ogl-330-fbo-mrt)
add_subdirectory(ogl-330-fbo-multisample)
add_subdirectory(ogl-330-fbo-texture-multisample)
add_subdirectory(ogl-330-fbo-srgb)
add_subdirectory(ogl-330-sampler-fetch)
add_subdirectory(ogl-330-image-2d)
add_subdirectory(ogl-330-image-2d-compressed)
add_subdirectory(ogl-330-image-array)
add_subdirectory(ogl-330-image-rect)
add_subdirectory(ogl-330-primitive-shader)
add_subdirectory(ogl-330-query-conditional)
add_subdirectory(ogl-330-query-occlusion)
add_subdirectory(ogl-330-query-timer)
add_subdirectory(ogl-330-rasterizer-viewport)
add_subdirectory(ogl-330-sampler-anisotropy-ext)
add_subdirectory(ogl-330-sampler-filter)
add_subdirectory(ogl-330-sampler-object)
add_subdirectory(ogl-330-sampler-swizzle)
add_subdirectory(ogl-330-sampler-wrap)
add_subdirectory(ogl-330-test-scissor)
add_subdirectory(ogl-330-transform-feedback)
add_subdirectory(ogl-330-vao)

add_subdirectory(ogl-400-blend-mrt)
add_subdirectory(ogl-400-buffer-texture-rgb)
add_subdirectory(ogl-400-draw-indirect)
add_subdirectory(ogl-400-glsl-subroutine)
add_subdirectory(ogl-400-primitive-instancing)
add_subdirectory(ogl-400-primitive-tessellation)
add_subdirectory(ogl-400-sampler-fetch)
add_subdirectory(ogl-400-sampler-gather)
add_subdirectory(ogl-400-transform-feedback-object)

=======
# OpenGL 2.1 samples
set(GL_VERSION_GTC 210)

set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(buffer-type)
glCreateSampleGTC(buffer-update)
glCreateSampleGTC(draw-elements)
glCreateSampleGTC(draw-range)

set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(image-2d)
glCreateSampleGTC(image-2d-compressed)

set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(query-occlusion)
glCreateSampleGTC(rasterizer-viewport)

set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(sampler-anisotropy-ext)
glCreateSampleGTC(sampler-filter)
glCreateSampleGTC(sampler-wrap)

set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(test-scissor)

# OpenGL 3.3 samples
set(GL_VERSION_GTC 330)

set(GL_SHADER_GTC blend-index.vert blend-index.frag)
glCreateSampleGTC(blend-index)
set(GL_SHADER_GTC mrt.vert mrt.frag image-2d.vert image-2d.frag)
glCreateSampleGTC(blend-mrt)
set(GL_SHADER_GTC texture-buffer.vert texture-buffer.frag)
glCreateSampleGTC(buffer-texture)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(buffer-type)
set(GL_SHADER_GTC uniform-buffer.vert uniform-buffer.frag)
glCreateSampleGTC(buffer-uniform)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(buffer-update)
glCreateSampleGTC(draw-base-vertex)
glCreateSampleGTC(draw-elements)
set(GL_SHADER_GTC instanced.vert instanced-array.frag)
glCreateSampleGTC(draw-instanced)
set(GL_SHADER_GTC instanced.vert instanced-array.frag)
glCreateSampleGTC(draw-instanced-array)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(draw-multiple)
glCreateSampleGTC(draw-range)
set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(fbo-blit)
glCreateSampleGTC(fbo-mipmaps)
set(GL_SHADER_GTC image-2d.vert image-2d.frag multiple-output.vert multiple-output.frag)
glCreateSampleGTC(fbo-mrt)
set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(fbo-multisample)
glCreateSampleGTC(fbo-texture-multisample)
glCreateSampleGTC(fbo-srgb)
glCreateSampleGTC(image-2d)
glCreateSampleGTC(image-2d-compressed)
set(GL_SHADER_GTC texture-array.vert texture-array.frag)
glCreateSampleGTC(image-array)
set(GL_SHADER_GTC texture-rect.vert texture-rect.frag)
glCreateSampleGTC(image-rect)
set(GL_SHADER_GTC flat-color.vert flat-color.geom flat-color.frag)
glCreateSampleGTC(primitive-shader)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(query-conditional)
glCreateSampleGTC(query-occlusion)
glCreateSampleGTC(query-timer)
glCreateSampleGTC(rasterizer-viewport)
set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(sampler-anisotropy-ext)
glCreateSampleGTC(sampler-filter)
glCreateSampleGTC(sampler-object)
glCreateSampleGTC(sampler-swizzle)
glCreateSampleGTC(sampler-wrap)
set(GL_SHADER_GTC fetch.vert fetch.frag)
glCreateSampleGTC(sampler-fetch)
set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(test-scissor)
set(GL_SHADER_GTC flat-color.vert flat-color.frag transformed.vert)
glCreateSampleGTC(transform-feedback)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(vao)

# OpenGL 4.0 samples
set(GL_VERSION_GTC 400)

set(GL_SHADER_GTC mrt.vert mrt.frag image-2d.vert image-2d.frag)
glCreateSampleGTC(blend-mrt)
set(GL_SHADER_GTC texture-buffer.vert texture-buffer.frag)
glCreateSampleGTC(buffer-texture-rgb)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(draw-indirect)
set(GL_SHADER_GTC subroutine.vert subroutine.frag)
glCreateSampleGTC(program-subroutine)
set(GL_SHADER_GTC primitive-instancing.vert primitive-instancing.geom primitive-instancing.frag)
glCreateSampleGTC(primitive-instanced)
set(GL_SHADER_GTC tess.vert tess.cont tess.eval tess.frag)
glCreateSampleGTC(primitive-tessellation)
set(GL_SHADER_GTC fetch.vert fetch.frag)
glCreateSampleGTC(sampler-fetch)
set(GL_SHADER_GTC gather.vert gather.frag)
glCreateSampleGTC(sampler-gather)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(transform-feedback-object)

# OpenGL Future
set(GL_VERSION_GTC xxx)

set(GL_SHADER_GTC uniform-buffer.vert uniform-buffer.frag)
glCreateSampleGTC(buffer-uniform)
set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(fbo-multisample)
set(GL_SHADER_GTC image-2d.vert image-2d.frag)
glCreateSampleGTC(sampler-object)
set(GL_SHADER_GTC flat-color.vert flat-color.frag)
glCreateSampleGTC(vao)

endif(APPLE)
